#+title: filepaths

(This README is best viewed on [[https://codeberg.org/fosskers/filepaths][Codeberg]]).

Inspired by [[https://github.com/vindarel/cl-str][str]], this library offers modern and consistent filepath manipulation
for Common Lisp.

It addresses three main issues found with the status quo, namely:

- Centrality: Functionality is spread across the standard library and =uiop=.
- Completeness: A number of common operations found in newer languages are missing entirely.
- Clarity: Function names are often unintuitive.

The =filepaths= library solves these issues by offering functions commonly found
elsewhere while naming them what you'd generally expect them to be. For
instance:

#+begin_src lisp
(filepaths:join "/home/you/code" "common-lisp" "hello.lisp")
#+end_src

#+RESULTS:
: #P"/home/you/code/common-lisp/hello.lisp"

There are many more functions available.

Note that this library is currently _Unix only_ and doesn't offer functions for
communicating with the filesystem to test if files exist, etc.

#+begin_quote
âœ… _This library has been confirmed to work with SBCL, ECL, and ABCL._
#+end_quote

* Installation

This library has no external dependencies. It only uses standard library functionality.

* Usage

It is recommended that you import this library with the nickname =path= or =p=.

#+begin_src lisp
(:local-nicknames (:p :filepaths))
#+end_src

Note that nearly every function here can be passed either a =pathname= or a
=string=.

** Structural Tests

*** rootp, emptyp

Is the given PATH the root directory?

#+begin_src lisp
(filepaths:rootp #p"/")
#+end_src

#+RESULTS:
: T

Is the given PATH an empty string?

#+begin_src lisp
(filepaths:emptyp #p"")
#+end_src

#+RESULTS:
: T
*** absolutep, relativep

Yields T when the given PATH a full, absolute path.

#+begin_src lisp
(filepaths:absolutep "/home/colin/foo.txt")
#+end_src

#+RESULTS:
: T

Yields T when the given PATH a relative one.

#+begin_src lisp
(filepaths:relativep #p"bar/foo.txt")
#+end_src

#+RESULTS:
: T

*** starts-with-p, ends-with-p

Are the initial components of a PATH some BASE?

#+begin_src lisp
(filepaths:starts-with-p #p"/foo/bar/baz/zing.json" "/foo/bar")
#+end_src

#+RESULTS:
: T

Are the final components of a PATH some given CHILD?

#+begin_src lisp
(filepaths:ends-with-p #p"/foo/bar/baz/zing.json" "baz/zing.json")
#+end_src

#+RESULTS:
: T

*** directoryp

Yields T if the PATH represents a directory.

#+begin_src lisp
(filepaths:directoryp #p"/foo/bar/")
#+end_src

#+RESULTS:
: T

#+begin_src lisp
(filepaths:directoryp #p"/foo/bar/baz.txt")
#+end_src

#+RESULTS:
: NIL

** Construction

*** join

Combine two or more components together.

#+begin_src lisp
(filepaths:join "/foo" "bar" "baz" "test.json")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz/test.json"

#+begin_src lisp
(filepaths:join #p"/bar/baz/" #p"foo.json")
#+end_src

#+RESULTS:
: #P"/bar/baz/foo.json"

** Component Access

*** base, with-base

 The non-extension, non-directory portion of the filename of a PATH.

#+begin_src lisp
(filepaths:base #p"/foo/bar/baz.txt")
#+end_src

#+RESULTS:
: baz

Swap the base portion of a PATH with a NEW one. Yields a new path object.

#+begin_src lisp
(filepaths:with-base #p"/foo/bar/baz.txt" "jack")
#+end_src

#+RESULTS:
: #P"/foo/bar/jack.txt"

*** name, with-name

The filename of a PATH with no other directory components.

#+begin_src lisp
(filepaths:name #p"/foo/bar/baz.txt")
#+end_src

#+RESULTS:
: baz.txt

Swap the filename portion of a PATH with a NEW one. Yields a new path object.

#+begin_src lisp
(filepaths:with-name #p"/foo/bar/baz.txt" "jack.json")
#+end_src

#+RESULTS:
: #P"/foo/bar/jack.json"

*** parent, with-parent

Yield PATH without its final component, if there is one.

#+begin_src lisp
(filepaths:parent #p"/foo/bar/baz.txt")
#+end_src

#+RESULTS:
: #P"/foo/bar/"

Swap the parent portion of a PATH.

#+begin_src lisp
(filepaths:with-parent #p"/foo/bar/baz.json" #p"/zing")
#+end_src

#+RESULTS:
: #P"/zing/baz.json"

*** extension, with-extension, add-extension, drop-extension

The extension of a given PATH.

#+begin_src lisp
(filepaths:extension #p"/foo/bar.json")
#+end_src

#+RESULTS:
: json

Swap the entire extension of a given PATH. Yields a new path object.

#+begin_src lisp
(filepaths:with-extension #p"/foo/bar/baz.txt" "json")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz.json"


Add an extension to the given path, even if it already has one.

#+begin_src lisp
(filepaths:add-extension #p"/foo/bar/baz.txt" "zip")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz.txt.zip"

Remove an extension from a PATH.

#+begin_src lisp
(filepaths:drop-extension #p"/foo/bar/baz.json")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz"

#+begin_src lisp
(filepaths:drop-extension #p"/foo/bar/baz.json.zip")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz.json"

** Conversion

*** components, from-list

Every component of a PATH broken up as a list.

#+begin_src lisp :results verbatim
(filepaths:components #p"/foo/bar/baz.json")
#+end_src

#+RESULTS:
: ("/" "foo" "bar" "baz.json")

Given a LIST of path components, construct a proper pathname object.

#+begin_src lisp
(filepaths:from-list '("foo" "bar" "baz"))
#+end_src

#+RESULTS:
: #P"foo/bar/baz"

#+begin_src lisp
(filepaths:from-list (filepaths:components "/foo/bar/baz/file.txt"))
#+end_src

#+RESULTS:
: #P"/foo/bar/baz/file.txt"

*** ensure-directory, ensure-string, ensure-path

If a given PATH doesn't end in a path separator, add one.

#+begin_src lisp
(filepaths:ensure-directory #p"/foo/bar/baz")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz/"

A PATH is definitely a string after this.

#+begin_src lisp :results verbatim
(type-of (filepaths:ensure-string #p"/foo/bar"))
#+end_src

#+RESULTS:
: (SIMPLE-BASE-STRING 8)

A PATH is definitely a pathname after this.

#+begin_src lisp
(type-of (filepaths:ensure-path "/foo/bar"))
#+end_src

#+RESULTS:
: PATHNAME

*** to-string, from-string

Convert a PATH object into string.

#+begin_src lisp
(filepaths:to-string #p"/foo/bar/baz.txt")
#+end_src

#+RESULTS:
: /foo/bar/baz.txt

Convert a string into a proper filepath object.

#+begin_src lisp
(filepaths:from-string "/foo/bar/baz.txt")
#+end_src

#+RESULTS:
: #P"/foo/bar/baz.txt"

** Conditions

For certain functions in this library, it is not appropriate to return =nil= in
case of an error. The following conditions are thus triggered under certain
circumstances:

- =no-filename=
- =empty-path=
- =root-no-parent=

* Further Work

- Windows support

* See Also

- https://codeberg.org/fourier/ppath
- https://quickdocs.org/uiop
